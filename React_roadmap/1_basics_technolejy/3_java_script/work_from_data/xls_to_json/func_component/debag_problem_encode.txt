
import React from 'react';
import s from './Zvit.module.css';
import {NavLink} from "react-router-dom"
import ReactDOM from 'react-dom';
import $ from 'jquery';
import Wrapp_zvit from './Wrapp_zvit/Wrapp_zvit';
import XLSX from 'xlsx';
import XLS from 'xlsx';


const Zvit = () =>{



            

    var oFileIn;

    $(function() {
        oFileIn = document.getElementById('my_file_input');
        if(oFileIn.addEventListener) {
            oFileIn.addEventListener('change', filePicked, false);
        }
    });


    function filePicked(oEvent) {
        // Get The File From The Input
        var oFile = oEvent.target.files[0];
        var sFilename = oFile.name;
        // Create A File Reader HTML5
        var reader = new FileReader();

        // Ready The Event For When A File Gets Selected
        reader.onload = function(e) {
            var data = e.target.result;
            var cfb = XLS.CFB.read(data, {type: 'binary'});
            var wb = XLS.parse_xlscfb(cfb);
            // Loop Over Each Sheet
            wb.SheetNames.forEach(function(sheetName) {
                // Obtain The Current Row As CSV
                var sCSV = XLS.utils.make_csv(wb.Sheets[sheetName]);   
                var oJS = XLS.utils.sheet_to_row_object_array(wb.Sheets[sheetName]);   

                $("#my_file_output").html(sCSV);
                buld_table(oJS)
                // console.log(oJS);
            });
        };

        // Tell JS To Start Reading The File.. You could delay this if desired
        reader.readAsBinaryString(oFile);
    }




    
    function buld_table (data){


        for (let index = 0; index < 1024; index++) {
           console.log(index); 
        
        }

        // data.forEach(its=>{    
            
        //     console.log(its);

        //     let newSTR = its        
            
        //     // console.log(newSTR);
        //     // console.log(typeof(newSTR));
            
        // })

    }




    return (
        <div>
             <div>    
                <NavLink to ="/Zvit/Wrapp_zvit">Shov zvit</NavLink>
                <span></span>
            </div>  


            <div>
                <input type="file" id="my_file_input" />    
                <div id='my_file_output'></div>    
            </div> 

          


            <Wrapp_zvit/>


            
        </div>


    )



}

export default Zvit;
   





































   
        var oFileIn;

    $(function() {
        oFileIn = document.getElementById('my_file_input');
        if(oFileIn.addEventListener) {
            oFileIn.addEventListener('change', filePicked, false);
        }
    });


    function filePicked(oEvent) {
        // Get The File From The Input
        var oFile = oEvent.target.files[0];
        var sFilename = oFile.name;
        // Create A File Reader HTML5
        var reader = new FileReader();

        // Ready The Event For When A File Gets Selected
        reader.onload = function(e) {
            var data = e.target.result;
            var cfb = XLS.CFB.read(data, {type: 'binary'});
            var wb = XLS.parse_xlscfb(cfb);
            // Loop Over Each Sheet
            wb.SheetNames.forEach(function(sheetName) {
                // Obtain The Current Row As CSV
                var sCSV = XLS.utils.make_csv(wb.Sheets[sheetName]);   
                var oJS = XLS.utils.sheet_to_row_object_array(wb.Sheets[sheetName]);   

                $("#my_file_output").html(sCSV);
                console.log(oJS)
            });
        };

        // Tell JS To Start Reading The File.. You could delay this if desired
        reader.readAsBinaryString(oFile);
    }
  

    return (
        <div>
            <div>    
                <NavLink to ="/Zvit/Wrapp_zvit">Shov zvit</NavLink>
                <span></span>
            </div>  


            <div>
                <input type="file" id="my_file_input" />    
                <div id='my_file_output'></div>    
            </div> 

          


            <Wrapp_zvit/>

 


   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
    function debag_encode (data){

        var result = []
        
    
        data.forEach(its => {
            let el = its 

            // console.log(el)
    
            // let check = {
            // é: ["é", "й"], ö: ["ö", "ц"], ó: ["ó", "у"], ê: ["ê", "к"], å: ["å", "е"], í: ["í", "н"], ã: ["ã", "г"], ø: ["ø", "ш"], ù: ["ù", "щ"], ç: ["ç", "з"], õ: ["õ", "х"], ô: ["ô", "ф"], â: ["â", "в"], à: ["à", "а"], ï: ["ï", "п"], ð: ["ð", "р"], î: ["î", "о"], ë: ["ë", "л"], ä: ["ä", "д"], æ: ["æ", "ж"], º: ["º", "є"], ÿ: ["ÿ", "я"], ñ: ["ñ", "с"], ì: ["ì", "м"], è: ["è", "и"], ò: ["ò", "т"], ü: ["ü", "ь"], á: ["á", "б"], þ: ["þ", "ю"], É: ["É", "Й"], Ö: ["Ö", "Ц"], Ó: ["Ó", "У"], Ê: ["Ê", "К"], Å: ["Å", "Е"], Í: ["Í", "Н"], Ã: ["Ã", "Г"], Ø: ["Ø", "Ш"], Ù: ["Ù", "Щ"], Ç: ["Ç", "З"], Õ: ["Õ", "Х"], Ô: ["Ô", "Ф"], Â: ["Â", "В"], À: ["À", "А"], Ï: ["Ï", "П"], Ð: ["Ð", "Р"], Î: ["Î", "О"], Ë: ["Ë", "Л"], Ä: ["Ä", "Д"], Æ: ["Æ", "Ж"], ª: ["ª", "Є"], ß: ["ß", "Я"], Ñ: ["Ñ", "С"], Ì: ["Ì", "М"], È: ["È", "И"], Ò: ["Ò", "Т"], Ü: ["Ü", "Ь"], Á: ["Á", "Б"], Þ: ["Þ", "Ю"]
            // }
    
            // el = el.replace(/[éöóêåíãøùçõôâàïðîëäæÿñìèòüáþÉÖÓÊÅÍÃØÙÇÕÔÂÀÏÐÎËÄÆßÑÌÈÒÜÁÞ]/g, (a1) => {           
                
    
            //     if (check[a1]){
            //         return check[a1][1]
            //     }
                
            // })
    
            // el = el.replace(/[³]/g, "і")
            // el = el.replace(/[¿]/g, "ї")
            // el = el.replace(/[º]/g, "є")
            // el = el.replace(/[÷]/g, "ч")
            // el = el.replace(/[¯]/g, "Ї")
            // el = el.replace(/[²]/g, "І")
            // el = el.replace(/[ª]/g, "Є")
            // el = el.replace(/[×]/g, "Ч")
    
            // for(let i=0; i<10; i++){
            //     el = el.replace(/  /g, " ")
            // }
            
            // el = el.replace(" Шнекова", "Шнекова")
    
            // result.push(el)
    
        })
        
    // console.log(result); 
    }














































        function debag_encode (data){

let new_el = []


//   let ceack =  {é: "й", ö: "ц", ó: "у", ê: "к", å: "е", í: "н", ã: "г", ø: "ш", ù: "щ", ç: "з", õ: "х", ¿: "ї", ô: "ф", ³: "і", â: "в", à: "а", ï: "п", ð: "р", î: "о", ë: "л", ä: "д", æ: "ж", º: "є", ÿ: "я", ÷: "ч", ñ: "с", ì: "м", è: "и", ò: "т", ü: "ь", á: "б", þ: "ю", ´: "ґ", É: "Й", Ö: "Ц", Ó: "У", Ê: "К", Å: "Е", Í: "Н", Ã: "Г", Ø: "Ш", Ù: "Щ", Ç: "З", Õ: "Х", ¯: "Ї", Ô: "Ф", ²: "І", Â: "В", À: "А", Ï: "П", Ð: "Р", Î: "О", Ë: "Л", Ä: "Д", Æ: "Ж", ª: "Є", ß: "Я", ×: "Ч", Ñ: "С", Ì: "М", È: "И", Ò: "Т", Ü: "Ь", Á: "Б", Þ: "Ю"}

// ÷: ["÷", "ч"],  ³: ["³", "і"],  ¿: ["¿", "ї"],  ´: ["´", "ґ"],  ¯: ["¯", "Ї"],  ²: ["²", "І"],  ×: ["×", "Ч"],

let cheack = {
    é: ["é", "й"], ö: ["ö", "ц"], ó: ["ó", "у"], ê: ["ê", "к"], å: ["å", "е"], í: ["í", "н"], ã: ["ã", "г"], ø: ["ø", "ш"], ù: ["ù", "щ"], ç: ["ç", "з"], õ: ["õ", "х"], ô: ["ô", "ф"], â: ["â", "в"], à: ["à", "а"], ï: ["ï", "п"], ð: ["ð", "р"], î: ["î", "о"], ë: ["ë", "л"], ä: ["ä", "д"], æ: ["æ", "ж"], º: ["º", "є"], ÿ: ["ÿ", "я"], ñ: ["ñ", "с"], ì: ["ì", "м"], è: ["è", "и"], ò: ["ò", "т"], ü: ["ü", "ь"], á: ["á", "б"], þ: ["þ", "ю"], É: ["É", "Й"], Ö: ["Ö", "Ц"], Ó: ["Ó", "У"], Ê: ["Ê", "К"], Å: ["Å", "Е"], Í: ["Í", "Н"], Ã: ["Ã", "Г"], Ø: ["Ø", "Ш"], Ù: ["Ù", "Щ"], Ç: ["Ç", "З"], Õ: ["Õ", "Х"], Ô: ["Ô", "Ф"], Â: ["Â", "В"], À: ["À", "А"], Ï: ["Ï", "П"], Ð: ["Ð", "Р"], Î: ["Î", "О"], Ë: ["Ë", "Л"], Ä: ["Ä", "Д"], Æ: ["Æ", "Ж"], ª: ["ª", "Є"], ß: ["ß", "Я"], Ñ: ["Ñ", "С"], Ì: ["Ì", "М"], È: ["È", "И"], Ò: ["Ò", "Т"], Ü: ["Ü", "Ь"], Á: ["Á", "Б"], Þ: ["Þ", "Ю"]
}



data.forEach(it => {
    let el = it 

    el = el.replace(/[éöóêåíãøùçõ¿ô³âàïðîëäæºÿ÷ñìèòüáþ´ÉÖÓÊÅÍÃØÙÇÕ¯Ô²ÂÀÏÐÎËÄÆªß×ÑÌÈÒÜÁÞ]/g, (a1,a2,a3) => {
        if (check[a1][0]==a1){
            return check[a1][1]
        }
    })

    let new_el = []
    new_el.push(el);
    console.log(new_el)
})


}

data = [
"    Øíåêîâà ñï³ðàëü 225*76*220  S-4 L-2,0ì ë³âà 01300",
" ",
" ",
" ",
" ",
" ",
" ",
" ",
" "
]

debag_encode (data)

       
    function debag_encode (data){

        var result = []

        data.forEach(its => {
            let el = its 

            let check = {
            é: ["é", "й"], ö: ["ö", "ц"], ó: ["ó", "у"], ê: ["ê", "к"], å: ["å", "е"], í: ["í", "н"], ã: ["ã", "г"], ø: ["ø", "ш"], ù: ["ù", "щ"], ç: ["ç", "з"], õ: ["õ", "х"], ô: ["ô", "ф"], â: ["â", "в"], à: ["à", "а"], ï: ["ï", "п"], ð: ["ð", "р"], î: ["î", "о"], ë: ["ë", "л"], ä: ["ä", "д"], æ: ["æ", "ж"], º: ["º", "є"], ÿ: ["ÿ", "я"], ñ: ["ñ", "с"], ì: ["ì", "м"], è: ["è", "и"], ò: ["ò", "т"], ü: ["ü", "ь"], á: ["á", "б"], þ: ["þ", "ю"], É: ["É", "Й"], Ö: ["Ö", "Ц"], Ó: ["Ó", "У"], Ê: ["Ê", "К"], Å: ["Å", "Е"], Í: ["Í", "Н"], Ã: ["Ã", "Г"], Ø: ["Ø", "Ш"], Ù: ["Ù", "Щ"], Ç: ["Ç", "З"], Õ: ["Õ", "Х"], Ô: ["Ô", "Ф"], Â: ["Â", "В"], À: ["À", "А"], Ï: ["Ï", "П"], Ð: ["Ð", "Р"], Î: ["Î", "О"], Ë: ["Ë", "Л"], Ä: ["Ä", "Д"], Æ: ["Æ", "Ж"], ª: ["ª", "Є"], ß: ["ß", "Я"], Ñ: ["Ñ", "С"], Ì: ["Ì", "М"], È: ["È", "И"], Ò: ["Ò", "Т"], Ü: ["Ü", "Ь"], Á: ["Á", "Б"], Þ: ["Þ", "Ю"]
            }

            el = el.replace(/[éöóêåíãøùçõôâàïðîëäæÿñìèòüáþÉÖÓÊÅÍÃØÙÇÕÔÂÀÏÐÎËÄÆßÑÌÈÒÜÁÞ]/g, (a1) => {           
                

                if (check[a1][0]==a1){
                    return check[a1][1]
                }
                
            })

            el = el.replace(/[³]/g, "і")
            el = el.replace(/[¿]/g, "ї")
            el = el.replace(/[º]/g, "є")
            el = el.replace(/[÷]/g, "ч")
            el = el.replace(/[¯]/g, "Ї")
            el = el.replace(/[²]/g, "І")
            el = el.replace(/[ª]/g, "Є")
            el = el.replace(/[×]/g, "Ч")
            el = el.replace(/[  ]/g, " ")
            
            result.push(el)

        })



        
       console.log(result);
            

      
    }


    data = [
"    Øíåêîâà ñï³ðàëü 225*76*220  S-4 L-2,0ì ë³âà 01300",
"dfgdfgdfgdfgdfgadfg ",
"   Øíåêîâà ñï³ðàëü 225*76*220  S-4 L-2,0ì ë³âà 01300 ",
" ",
" ",
" ",
" ",
" ",
" "
]

debag_encode (data)



